# Project 2 Report

## Doubly Linked List Implementation

My doubly linked list implementation is circular and contains a dummy node. This means, on instantiation, we create a node that will never have it's value accessed which means we never need to deal with the head pointer is null case, and it means that it's very easy to check when we have completed a loop, simply when the head pointer points to the same thing as either the next pointer or the current pointer, depending on where in the loop we check for that. The circularity of the loop also helps to reduce edge cases, it means that it is always trivial to find the previous node in the loop, even on the "no items" (just the dummy node) case. In this case, we can still go back one node to get the previous node pointer, and because the pointers are circular, it still points to the dummy node and re-linking the list on insert works well, with the same algorithm in all cases.

My nodes are pretty simple themselves, simply a data member and two-pointer members, one for forward and one for reverse. Its public interface is a bit more complex, but it's really only a bunch of getters and setters. The only other thing of note is the constructors, of which there are two. One is only used to create the head node, so it defines it's two pointers as to itself. The other one is the used in other cases, where you feed in two pointers and it sets itself up correctly. This system means that nodes will never have null pointers in themselves, which increases the safety of my implementation significantly.

Below are some diagrams of my list

#### A single node

```
          .----------------.
          | ItemType Value |
          | -------------- |
          |   Node *next   |
          | -------------- |
          |   Node *prev   |
          '----------------'
```

#### An empty list

```
                    .----------.
                   ( Node *Head )
                    '----------'
                          |
                          v
                 .----------------.
                 | ItemType Value |
                 | -------------- |
           .---->|   Node *next   |-----.
           |     | -------------- |     |
           |   .-|   Node *prev   |<.   |
           |   | '----------------' |   |
           |   '--------------------'   |
           '----------------------------'
```

#### A list with two items

```
        .----------.
       ( Node *Head )
        '----------'
              |
              v
     .----------------.   .----------------.   .----------------.
     | ItemType Value |   | ItemType Value |   | ItemType Value |
     | -------------- |   | -------------- |   | -------------- |
 .-->|   Node *next   |-->|   Node *next   |-->|   Node *next   |---.
 |   | -------------- |   | -------------- |   | -------------- |   |
 | .-|   Node *prev   |<--|   Node *prev   |<--|   Node *prev   |<. |
 | | '----------------'   '----------------'   '----------------' | |
 | '--------------------------------------------------------------' |
 '------------------------------------------------------------------'
```

## Algorithm Pseudocode

#### Subsequence

Explanation:

- Check if the second sequence is of size 0, if so return -1
- Compare the first value in `seq2` to the current item in `seq1`, incrementing `seq1_count` by one until something is found and go to the check subsystem.
  - Check subsystem can either succeed, in which case return `seq1_count`
  - Check subsystem can fail, in which case resume checking back at the next loop, so at `seq1_count + 1`
- Continue this until there are too few items in the main list that a match is possible. This will be when `seq1_count >= seq1.size() - seq2.size() + 1`. This means we skip loops where it's not possible to have a whole subsequence because seq1 is too short, and also means we will break out of the loop before we overread `seq_1`. If nothing is found, return -1.

Check subsystem:

- Set a flag to false
- Loop over every item in the lists, comparing them.
  - If they are equal, move on to the next item
  - If they are not equal, set flag to true and break out of the loop
- Check if the flag is false. If it is, return `seq1_count`, and if not, resume the above logic until another first character match is found.

This is a good summary of the logic, but please see the code for additional explanation as it is well commented.

#### Interleave

Explanation:

- Create a temporary sequence that we will write to. This is important so that we can handle the case where `result` is the same as `seq1` or `seq2`, as wiping `result` at the start would cause issues in this case.
- Check for edge cases:
  - Both `seq1` and `seq2` are empty, in which case we set result to `temp_sequence` and return.
  - Just `seq1` is empty, in which case we set result to `seq2` and return
  - Just `seq2` is empty, in which case we set result to `seq1` and return
- Then, we set the limit of the upcoming loop to the greater of the length of `seq1` or `seq2`.
- Now, we enter into a for loop, starting with an index of 0 and incrementing to max. Every loop:
  - If index is smaller than the size of `seq1`, get the next item in `seq1` and insert it at the next item in `temp_sequence`
  - If index is smaller than the size of `seq2`, get the next item in `seq2` and insert it at the next item in `temp_sequence`
- Set result to `temp_sequence` and return

The reason for this unusual set of `if`s in the for loop is so that, in the common case in which `seq1` and `seq2` contain different values, the loop will never overread on either list but it will still append all the items in the longer list to the `temp_sequence`

#### Insert (two parameters)

1. Check if pos < 0 or pos > the list size and if so, return -1 as that insert would fail
2. Save the pointer to the node currently at that index, as it will become the next pointer
3. Save the pointer to the previous node as well, as it will become the previous node
4. Create a new node, using the constructor that takes in two node pointers. This handles the linking of this node
5. Finally, link the previous and next node back to this node, and increment the current size
6. Return pos

#### Insert (one parameter)

1. Get the first node and set a counter to zero.
2. Loop, checking if the search node points to the same node as head, meaning that we have looped and not found anything, or if the target value is smaller than the current node we are looking for, in which case also break out. If neither of these things are found, increment index and check the next node.
3. When that breaks out, call the two parameter insert with the current value of index and the value to insert.
   This approach works really well because, when we hit the `search_node == head` case, index is already set to the correct position where the insert needs to be made, namely the end of the list. I'm very happy with how well this system handles the edge cases here.

#### Erase

1. First, check if the pos is valid
2. Then, get the node we're removing
3. Store the next and previous node pointers so you can re-link them
4. Delete the node
5. re-link the next and previous nodes
6. Decrement the current size

#### Remove

1. Get the first node and set a counter to zero.
2. Loop: 
    - Store the pointer to the next node
    - Check if the current node's value matches the target value. If true, erase the node and increment counter
    - Set the next search node to the next node we saved earlier
    - Check if the search node is the dummy node, in which case break out
3. Return counter

Side note - you may see `if (nodeToRemove == nullptr) report_null_prt_err();` in the code after every time we get a node. This function, while in development, would write to stderr and exit when called, and I used it as a way to check to see if I ever got a nullptr from anything. It doesn't do anything outside development though, as it's contents are blocked by an `ifdef`.

## Test Cases

#### Tests for Sequence public functions

```cpp
Sequence ss;  // ItemType is std::string
assert(ss.size() == 0 && ss.empty());  // Test size and empty work on an empty Sequence
ss.insert(0, "aaa");
assert(ss.size() == 1 && !ss.empty());  // Test size and empty work on a filled Sequence
ss.insert(1, "bbb");
assert(ss.size() == 2 && !ss.empty());  // Test size and empty work on a filled Sequence
ss.insert(2, "ccc");
assert(ss.size() == 3 && !ss.empty());  // Test size and empty work on a filled Sequence
ItemType x = "xxx";
assert(!ss.get(3, x) && x == "xxx");  // x is unchanged
assert(ss.get(1, x) && x == "bbb");  // x is set to bbb
assert(ss.insert(4, "ddd") == -1 && ss.insert(-1, "ddd"));  // adding item at invalid pos fails
assert(ss.insert(0, "zzz") == 0 && ss.get(0, x) && x == "zzz");  // zzz is inserted at start
assert(ss.insert(1, "yyy") == 1 && ss.get(1, x) && x == "yyy");  // yyy is inserted in middle
assert(ss.size() == 5 && !ss.empty());  // Test size and empty work on a filled Sequence

// Array currently: zzz, yyy, aaa, bbb, ccc
assert(ss.erase(1) && ss.get(0, x) && x == "zzz" && ss.get(1, x) &&
        x == "aaa");  // Test that erase works in middle
assert(ss.erase(0) && ss.get(0, x) && x == "aaa" && ss.get(1, x) &&
        x == "bbb");  // Test that erase works at start
assert(ss.erase(2) && !ss.get(2, x) && ss.get(1, x) && x == "bbb");  // Test that erase works at end
assert(!ss.erase(-1) && !ss.erase(2) && ss.get(0, x) && x == "aaa" && ss.get(1, x) &&
        x == "bbb");  // Test that fails with bad inputs and leaves everything unchanged
assert(ss.size() == 2 && !ss.empty());  // Test size and empty work on a filled Sequence

ss.insert(0, "fff");
ss.insert(0, "ggg");
ss.insert(0, "hhh");

// List currently: hhh, ggg, fff, aaa, bbb
assert(ss.set(0, "vvv") && ss.get(0, x) && x == "vvv");  // Test that set works
assert(ss.set(2, "lll") && ss.get(2, x) && x == "lll");  // Test that set works
assert(ss.set(4, "ooo") && ss.get(4, x) && x == "ooo");  // Test that set works
assert(ss.get(0, x) && x == "vvv" && ss.get(1, x) && x == "ggg" && ss.get(2, x) && x == "lll" && ss.get(3, x) &&
        x == "aaa" && ss.get(4, x) && x == "ooo" && !ss.get(5, x) &&
        x == "ooo");  // Test that set didn't do anything funky to the list
assert(!ss.set(-1, "ppp") && !ss.set(5, "ppp")); // Test that set fails when it should
assert(ss.get(0, x) && x == "vvv" && ss.get(1, x) && x == "ggg" && ss.get(2, x) && x == "lll" &&
        ss.get(3, x) && x == "aaa" && ss.get(4, x) && x == "ooo" && !ss.get(5, x) &&
        x == "ooo");  // Test that set didn't do anything funky to the list


Sequence st = Sequence();
st.insert(0, "aaa");
st.insert(0, "aaa");
st.insert(0, "aaa");
st.insert(0, "bbb");
assert(st.remove("aaa") == 3 && st.size() == 1 && st.get(0, x) &&
        x == "bbb");  // test that removing from the tail works
st.insert(1, "aaa");
st.insert(2, "aaa");
st.insert(3, "aaa");
st.insert(4, "ccc");
assert(st.remove("bbb") == 1 && st.size() == 4 && st.get(0, x) &&
        x == "aaa");  // test that removing from the front works

Sequence su = Sequence();
su.insert(0, "aaa");
su.insert(1, "bbb");
su.insert(2, "ccc");
su.insert(3, "ddd");
su.insert(4, "eee");
assert(su.find("aaa") == 0 && su.find("bbb") == 1 && su.find("ccc") == 2 && su.find("ddd") == 3 &&
        su.find("eee") == 4 && su.find("fff") == -1);  // Test that find works correctly
// su = aaa|bbb|ccc|ddd|eee

Sequence sv = Sequence();
sv.insert("aaa");
sv.insert("bbb");
sv.insert("ccc");
sv.insert("ddd");
sv.insert("eee");
assert(sv.find("aaa") == 0 && sv.find("bbb") == 1 && sv.find("ccc") == 2 && sv.find("ddd") == 3 &&
        sv.find("eee") == 4 && sv.find("fff") == -1);  // Test that insert works correctly in the simple case
sv.insert("aaa");
sv.insert("111");
sv.insert("zzz");
assert(sv.find("111") == 0 && sv.find("aaa") == 1 && sv.find("bbb") == 3 && sv.find("ccc") == 4 &&
        sv.find("ddd") == 5 && sv.find("eee") == 6 &&
        sv.find("zzz") == 7); // Test that insert works in a more complex case
// sv = 111|aaa|aaa|bbb|ccc|ddd|eee|zzz

sv.swap(su);
assert(sv.find("aaa") == 0 && sv.find("bbb") == 1 && sv.find("ccc") == 2 && sv.find("ddd") == 3 &&
        sv.find("eee") == 4 && sv.find("111") == -1 &&
        sv.find("zzz") == -1);  // Check that sv now contains the contents of su
assert(su.find("111") == 0 && su.find("aaa") == 1 && su.find("bbb") == 3 && su.find("ccc") == 4 &&
        su.find("ddd") == 5 && su.find("eee") == 6 && su.find("zzz") == 7 &&
        su.size() == 8);  // Check the opposite

Sequence sw = Sequence();
sw.insert("aaa");
sw.insert("bbb");
sw.insert("ccc");
sw.insert("ddd");
sw.insert("eee");
Sequence sx(sw);
assert(sx.find("aaa") == 0 && sx.find("bbb") == 1 && sx.find("ccc") == 2 && sx.find("ddd") == 3 &&
        sx.find("eee") == 4 && sx.find("fff") == -1 && sx.size() == 5);  // Check a copy for something with data

Sequence sy = Sequence();
Sequence sz(sy);
assert(sz.size() == 0 && !sz.get(0, x)); // Check copy of something with nothing in it

su = sy;
assert(su.size() == 0 && !su.get(0, x)); // Check that assignment works for empty stuff
su = sw;
assert(su.find("aaa") == 0 && su.find("bbb") == 1 && su.find("ccc") == 2 && su.find("ddd") == 3 &&
        su.find("eee") == 4 && su.find("fff") == -1 &&
        su.size() == 5);  // Check that assignment works for other things
```

#### Tests for `subsequence`

```cpp
Sequence sa = Sequence();
sa.insert("aaa");
sa.insert("aaa");
sa.insert("aaa");
sa.insert("aaa");
sa.insert("aaa");
sa.insert(0, "bbb");
sa.insert(2, "bbb");
// bbb|aaa|bbb|aaa|aaa|aaa|aaa

// sb should fail
Sequence sb = Sequence();
sb.insert("bbb");
sb.insert("bbb");
sb.insert("bbb");
assert(subsequence(sa, sb) == -1);

// sc should succeed w/ 0
Sequence sc = Sequence();
sc.insert(0, "bbb");
sc.insert(1, "aaa");
assert(subsequence(sa, sc) == 0);

// sd should succeed with 1
Sequence sd = Sequence();
sd.insert(0, "aaa");
sd.insert(1, "bbb");
assert(subsequence(sa, sd) == 1);

// se should succeed with 2
Sequence se = Sequence();
se.insert(0, "bbb");
se.insert(1, "aaa");
se.insert(1, "aaa");
assert(subsequence(sa, se) == 2);

// sf should succeed with 3
Sequence sf = Sequence();
sf.insert("aaa");
sf.insert("aaa");
sf.insert("aaa");
sf.insert("aaa");
assert(subsequence(sa, sf) == 3);

// sg should succeed with 3
Sequence sg = Sequence();
sg.insert("aaa");
sg.insert("aaa");
sg.insert("aaa");
assert(subsequence(sa, sg) == 3);

// sh should fail
Sequence sh = Sequence();
sh.insert("aaa");
sh.insert("aaa");
sh.insert("aaa");
sh.insert("aaa");
sh.insert("aaa");
assert(subsequence(sa, sh) == -1);


Sequence s0 = Sequence();

// sb should fail
Sequence sz = Sequence();
sb.insert("bbb");
sb.insert("bbb");
sb.insert("bbb");
assert(subsequence(s0, sz) == -1);
```

#### Tests for `interleave`

```cpp
Sequence result = Sequence();

Sequence sa = Sequence();
sa.insert("aaa");
sa.insert("bbb");
sa.insert("ccc");
sa.insert("ddd");
sa.insert("eee");
sa.insert(0, "fff");
sa.insert(2, "ggg");

Sequence sb = Sequence();
sb.insert("zzz");
sb.insert("xxx");
sb.insert("yyy");

// Check sizing and content of two with content, larger seq1
interleave(sa, sb, result);
assert(result.size() == 10);
assert(result.find("fff") == 0 && result.find("xxx") == 1 && result.find("aaa") == 2);
assert(result.find("yyy") == 3 && result.find("ggg") == 4 && result.find("zzz") == 5);
assert(result.find("bbb") == 6 && result.find("ccc") == 7 && result.find("ddd") == 8);
assert(result.find("eee") == 9);

// Check sizing and content of two with content, larger seq2, non-zero content in result
interleave(sb, sa, result);
assert(result.size() == 10);
assert(result.find("fff") == 1 && result.find("xxx") == 0 && result.find("aaa") == 3);
assert(result.find("yyy") == 2 && result.find("ggg") == 5 && result.find("zzz") == 4);
assert(result.find("bbb") == 6 && result.find("ccc") == 7 && result.find("ddd") == 8);
assert(result.find("eee") == 9);

// Check sizing and content for empty seq2 and non-zero content in result
Sequence s0 = Sequence();
interleave(sa, s0, result);
assert(result.size() == 7);
assert(result.find("fff") == 0 && result.find("aaa") == 1 && result.find("ggg") == 2);
assert(result.find("bbb") == 3 && result.find("ccc") == 4 && result.find("ddd") == 5);
assert(result.find("eee") == 6);

// Check sizing and content for empty seq1 with empty result
interleave(s0, sa, result);
assert(result.size() == 7);
assert(result.find("fff") == 0 && result.find("aaa") == 1 && result.find("ggg") == 2);
assert(result.find("bbb") == 3 && result.find("ccc") == 4 && result.find("ddd") == 5);
assert(result.find("eee") == 6);

// Check sizing and content for empty both with non-empty result
result.insert("fff");
interleave(s0, s0, result);
assert(result.size() == 0);

// Check interleaving same item twice
interleave(sb, sb, result);
assert(result.size() == 6);
ItemType itemType;
assert(result.get(0, itemType) && itemType == "xxx" && result.get(1, itemType) && itemType == "xxx" &&
    result.get(2, itemType) && itemType == "yyy" && result.get(3, itemType) && itemType == "yyy" &&
    result.get(4, itemType) && itemType == "zzz" && result.get(5, itemType) && itemType == "zzz");

// Test interleaving the same items as results
interleave(sb, sb, sb);
assert(sb.size() == 6);
assert(result.get(0, itemType) && itemType == "xxx" && result.get(1, itemType) && itemType == "xxx" &&
    result.get(2, itemType) && itemType == "yyy" && result.get(3, itemType) && itemType == "yyy" &&
    result.get(4, itemType) && itemType == "zzz" && result.get(5, itemType) && itemType == "zzz");

```
